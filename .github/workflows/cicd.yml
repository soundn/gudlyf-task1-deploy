name: CICD Pipeline

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          clean: true
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn package --file pom.xml

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Boardgame
          path: target/*.jar

  test:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Trivy FS Scan
        run: |
          trivy fs --scanners vuln --format table -o trivy-fs-report.html .

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build_and_push_docker:
    needs: test
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          docker build -t soundnw/testapp:latest .

      - name: Trivy Image Scan
        run: |
          trivy image --format table -o trivy-image-report.html soundnw/testapp:latest

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker Image
        run: |
          docker push soundnw/testapp:latest

  canary_deployment:
    needs: build_and_push_docker
    runs-on: self-hosted
    steps:
      - name: Checkout deployment repository
        uses: actions/checkout@v3
        with:
          repository: soundn/gudlyf-task1-deploy
          path: gudlyf-task1-deploy

      - name: Deploy to Kubernetes (Canary Deployment)
        uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}

      - name: Set Namespace
        run: |
          NAMESPACE="${{ github.event.inputs.environment || 'dev' }}"
          echo "Using namespace: $NAMESPACE"
          kubectl create namespace $NAMESPACE || true
          kubectl config set-context --current --namespace=$NAMESPACE

      - name: Deploy Canary Version
        working-directory: gudlyf-task1-deploy
        run: |
          if [ -f k8s/canary-deployment.yml ]; then
            kubectl apply -f k8s/canary-deployment.yml
          elif [ -f k8s/canary-deployment.yaml ]; then
            kubectl apply -f k8s/canary-deployment.yaml
          else
            echo "Error: Neither k8s/canary-deployment.yml nor k8s/canary-deployment.yaml found"
            exit 1
          fi

      - name: Monitor Canary Deployment
        run: |
          kubectl get deployments
          CANARY_DEPLOYMENT=$(kubectl get deployments -o jsonpath='{.items[*].metadata.name}' | grep -o '\bboardgame-deployment-canary\b')
          if [ -z "$CANARY_DEPLOYMENT" ]; then
            echo "Error: Canary deployment not found"
            exit 1
          fi
          kubectl rollout status deployment/$CANARY_DEPLOYMENT --timeout=5m || true
          READY=$(kubectl get deployment $CANARY_DEPLOYMENT -o jsonpath='{.status.readyReplicas}')
          if [ "$READY" -eq "0" ]; then
            echo "Error: Canary deployment failed to become ready"
            exit 1
          fi

  production_deployment:
    needs: canary_deployment
    runs-on: self-hosted
    steps:
      - name: Checkout deployment repository
        uses: actions/checkout@v3
        with:
          repository: soundn/gudlyf-task1-deploy
          path: gudlyf-task1-deploy

      - name: Deploy to Kubernetes (Production Deployment)
        uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}

      - name: Set Namespace
        run: |
          NAMESPACE="${{ github.event.inputs.environment || 'dev' }}"
          echo "Using namespace: $NAMESPACE"
          kubectl config set-context --current --namespace=$NAMESPACE

      - name: Promote to Production
        working-directory: gudlyf-task1-deploy
        run: |
          echo "Canary deployment successful, promoting to production"
          if [ -f k8s/production-deployment.yml ]; then
            kubectl apply -f k8s/production-deployment.yml
          elif [ -f k8s/production-deployment.yaml ]; then
            kubectl apply -f k8s/production-deployment.yaml
          else
            echo "Error: Neither k8s/production-deployment.yml nor k8s/production-deployment.yaml found"
            exit 1
          fi

      - name: Deploy Services
        working-directory: gudlyf-task1-deploy
        run: |
          if [ -f k8s/service.yml ]; then
            kubectl apply -f k8s/service.yml
          elif [ -f k8s/service.yaml ]; then
            kubectl apply -f k8s/service.yaml
          else
            echo "Error: Neither k8s/service.yml nor k8s/service.yaml found"
            exit 1
          fi

      - name: Monitor Production Deployment
        run: |
          PROD_DEPLOYMENT=$(kubectl get deployments -o jsonpath='{.items[*].metadata.name}' | grep -o '\bboardgame-deployment\b')
          if [ -z "$PROD_DEPLOYMENT" ]; then
            echo "Error: Production deployment not found"
            exit 1
          fi
          kubectl rollout status deployment/$PROD_DEPLOYMENT --timeout=5m